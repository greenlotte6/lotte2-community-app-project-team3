import React, { useState, useEffect } from "react";

export const DetailsModifyModal = ({ onClose, task, onTaskUpdated }) => {
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    priority: "medium",
    status: "todo",
    assignee: "",
    dueDate: "",
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isDeleteMode, setIsDeleteMode] = useState(false);

  // Î™®Îã¨ Ïó¥Î¶¥ Îïå Í∏∞Ï°¥ ÏûëÏóÖ Îç∞Ïù¥ÌÑ∞Î°ú Ìèº Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    if (task) {
      setFormData({
        title: task.title || "",
        description: task.description || "",
        priority: task.priority || "medium",
        status: getCurrentStatus(task), // ÌòÑÏû¨ Ïª¨ÎüºÏóêÏÑú ÏÉÅÌÉú Ï∂îÎ°†
        assignee: task.assignee?.name || "",
        dueDate: convertDateToInput(task.date), // ÎÇ†Ïßú ÌòïÏãù Î≥ÄÌôò
      });
    }
  }, [task]);

  // ÌòÑÏû¨ ÏûëÏóÖÏù¥ Ïñ¥Îäê Ïª¨ÎüºÏóê ÏûàÎäîÏßÄ Ï∂îÎ°† (ÏûÑÏãú)
  const getCurrentStatus = (task) => {
    // Ïã§Ï†úÎ°úÎäî Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÌòÑÏû¨ Ïª¨Îüº Ï†ïÎ≥¥Î•º Ï†ÑÎã¨Î∞õÏïÑÏïº Ìï®
    // Ïö∞ÏÑ† Ïö∞ÏÑ†ÏàúÏúÑÎÇò Îã§Î•∏ Ï†ïÎ≥¥Î°ú Ï∂îÎ°†
    return "todo"; // Í∏∞Î≥∏Í∞í
  };

  // ÎÇ†Ïßú ÌòïÏãù Î≥ÄÌôò (12/15 ‚Üí 2024-12-15)
  const convertDateToInput = (dateStr) => {
    if (!dateStr || !dateStr.includes("/")) return "";

    try {
      const [month, day] = dateStr.split("/");
      const year = new Date().getFullYear();
      return `${year}-${month.padStart(2, "0")}-${day.padStart(2, "0")}`;
    } catch (error) {
      return "";
    }
  };

  // ÏûÖÎ†• Ï≤òÎ¶¨
  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  // Ìèº Ï†úÏ∂ú (ÏàòÏ†ï)
  const handleSubmit = async () => {
    if (!formData.title.trim()) {
      alert("ÏûëÏóÖ Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    setIsSubmitting(true);

    try {
      // ÏàòÏ†ïÎêú ÏûëÏóÖ Í∞ùÏ≤¥ ÏÉùÏÑ±
      const updatedTask = {
        ...task, // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ
        title: formData.title.trim(),
        description: formData.description.trim(),
        priority: formData.priority,
        assignee: {
          name: formData.assignee || "ÎØ∏Î∞∞Ï†ï",
          avatar: formData.assignee
            ? formData.assignee.charAt(0).toUpperCase()
            : "?",
        },
        date: formData.dueDate
          ? new Date(formData.dueDate).toLocaleDateString("ko-KR", {
              month: "numeric",
              day: "numeric",
            })
          : task.date, // ÎÇ†ÏßúÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Ï°¥ ÎÇ†Ïßú Ïú†ÏßÄ
        updatedAt: new Date().toISOString(),
      };

      console.log("‚úÖ ÏûëÏóÖ ÏàòÏ†ï:", updatedTask);

      // Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê ÏàòÏ†ïÎêú ÏûëÏóÖ Ï†ÑÎã¨
      if (onTaskUpdated) {
        onTaskUpdated(updatedTask, formData.status);
      }

      // TODO: Î∞±ÏóîÎìú API Ìò∏Ï∂ú
      // await updateTask(task.id, updatedTask);

      alert("ÏûëÏóÖÏù¥ ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!");
      onClose();
    } catch (error) {
      console.error("‚ùå ÏûëÏóÖ ÏàòÏ†ï Ïã§Ìå®:", error);
      alert("ÏûëÏóÖ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // ÏûëÏóÖ ÏÇ≠Ï†ú
  const handleDelete = async () => {
    if (!window.confirm(`"${task.title}" ÏûëÏóÖÏùÑ Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) {
      return;
    }

    setIsSubmitting(true);

    try {
      console.log("üóëÔ∏è ÏûëÏóÖ ÏÇ≠Ï†ú:", task.id);

      // Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê ÏÇ≠Ï†ú ÏöîÏ≤≠
      if (onTaskUpdated) {
        onTaskUpdated(null, null, "delete"); // ÏÇ≠Ï†ú Ïã†Ìò∏
      }

      // TODO: Î∞±ÏóîÎìú API Ìò∏Ï∂ú
      // await deleteTask(task.id);

      alert("ÏûëÏóÖÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
      onClose();
    } catch (error) {
      console.error("‚ùå ÏûëÏóÖ ÏÇ≠Ï†ú Ïã§Ìå®:", error);
      alert("ÏûëÏóÖ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Î≤ÑÌäº ÌôúÏÑ±Ìôî Ï°∞Í±¥
  const isSaveEnabled = formData.title.trim() && !isSubmitting;

  if (!task) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="task-modal" onClick={(e) => e.stopPropagation()}>
        <style>{`
          .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
          }

          .task-modal {
            background: white;
            border-radius: 12px;
            padding: 0;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
          }

          .modal-header {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 20px;
            border-radius: 12px 12px 0 0;
            text-align: center;
            position: relative;
          }

          .modal-header.delete-mode {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
          }

          .modal-title {
            font-size: 20px;
            font-weight: 600;
            margin: 0 0 8px 0;
          }

          .modal-subtitle {
            opacity: 0.9;
            font-size: 14px;
            margin: 0;
          }

          .delete-toggle {
            position: absolute;
            top: 15px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 8px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.2s;
          }

          .delete-toggle:hover {
            background: rgba(255,255,255,0.3);
          }

          .modal-form {
            padding: 24px;
          }

          .form-group {
            margin-bottom: 20px;
          }

          .form-label {
            display: block;
            font-weight: 600;
            color: #343a40;
            margin-bottom: 8px;
            font-size: 14px;
          }

          .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.2s;
            box-sizing: border-box;
            font-family: inherit;
          }

          .form-input:focus {
            outline: none;
            border-color: #007bff;
          }

          .form-textarea {
            min-height: 80px;
            resize: vertical;
          }

          .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
          }

          .form-select {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            background: white;
            cursor: pointer;
            box-sizing: border-box;
          }

          .form-select:focus {
            outline: none;
            border-color: #007bff;
          }

          .priority-options {
            display: flex;
            gap: 8px;
            margin-top: 8px;
          }

          .priority-option {
            flex: 1;
            padding: 10px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 13px;
            font-weight: 500;
          }

          .priority-option.selected {
            border-color: #007bff;
            background: #e3f2fd;
            color: #0d47a1;
          }

          .priority-option.high.selected {
            border-color: #dc3545;
            background: #f8d7da;
            color: #721c24;
          }

          .priority-option.medium.selected {
            border-color: #ffc107;
            background: #fff3cd;
            color: #856404;
          }

          .priority-option.low.selected {
            border-color: #28a745;
            background: #d4edda;
            color: #155724;
          }

          .task-info {
            background: #f8f9fa;
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #007bff;
          }

          .task-info-label {
            font-size: 12px;
            color: #6c757d;
            font-weight: 600;
            margin-bottom: 4px;
          }

          .task-info-value {
            font-size: 14px;
            color: #495057;
          }

          .modal-actions {
            display: flex;
            gap: 12px;
            padding: 20px 24px;
            border-top: 1px solid #dee2e6;
            background: #f8f9fa;
            border-radius: 0 0 12px 12px;
          }

          .modal-actions.delete-mode {
            background: #fff5f5;
          }

          .modal-btn {
            flex: 1;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
          }

          .modal-btn-cancel {
            background: #6c757d;
            color: white;
          }

          .modal-btn-cancel:hover {
            background: #545b62;
          }

          .modal-btn-save {
            background: #28a745;
            color: white;
          }

          .modal-btn-save:hover:not(:disabled) {
            background: #218838;
          }

          .modal-btn-delete {
            background: #dc3545;
            color: white;
          }

          .modal-btn-delete:hover:not(:disabled) {
            background: #c82333;
          }

          .modal-btn:disabled {
            background: #adb5bd;
            cursor: not-allowed;
          }

          .form-help {
            font-size: 12px;
            color: #6c757d;
            margin-top: 4px;
          }

          .delete-warning {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 20px;
            font-size: 14px;
            text-align: center;
          }
        `}</style>

        <div className={`modal-header ${isDeleteMode ? "delete-mode" : ""}`}>
          <button
            className="delete-toggle"
            onClick={() => setIsDeleteMode(!isDeleteMode)}
            title={isDeleteMode ? "ÏàòÏ†ï Î™®ÎìúÎ°ú Ï†ÑÌôò" : "ÏÇ≠Ï†ú Î™®ÎìúÎ°ú Ï†ÑÌôò"}
          >
            {isDeleteMode ? "‚úèÔ∏è" : "üóëÔ∏è"}
          </button>
          <div className="modal-title">
            {isDeleteMode ? "üóëÔ∏è ÏûëÏóÖ ÏÇ≠Ï†ú" : "‚úèÔ∏è ÏûëÏóÖ ÏàòÏ†ï"}
          </div>
          <div className="modal-subtitle">
            {isDeleteMode
              ? "ÏûëÏóÖÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
              : "ÏûëÏóÖ Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌïòÏÑ∏Ïöî"}
          </div>
        </div>

        <div className="modal-form">
          {/* ÏûëÏóÖ Ï†ïÎ≥¥ (ÏùΩÍ∏∞ Ï†ÑÏö©) */}
          <div className="task-info">
            <div className="task-info-label">ÏûëÏóÖ ID</div>
            <div className="task-info-value">#{task.id}</div>
          </div>

          {isDeleteMode ? (
            <div className="delete-warning">
              ‚ö†Ô∏è Ïù¥ ÏûëÏóÖÏùÑ ÏÇ≠Ï†úÌïòÎ©¥ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.
              <br />
              Ï†ïÎßê "{task.title}" ÏûëÏóÖÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
            </div>
          ) : (
            <>
              {/* ÏûëÏóÖ Ï†úÎ™© */}
              <div className="form-group">
                <label className="form-label" htmlFor="taskTitle">
                  ÏûëÏóÖ Ï†úÎ™© *
                </label>
                <input
                  type="text"
                  id="taskTitle"
                  className="form-input"
                  placeholder="ÏûëÏóÖ Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  maxLength="100"
                  value={formData.title}
                  onChange={(e) => handleInputChange("title", e.target.value)}
                  disabled={isSubmitting}
                  autoFocus
                />
              </div>

              {/* ÏûëÏóÖ ÏÑ§Î™Ö */}
              <div className="form-group">
                <label className="form-label" htmlFor="taskContent">
                  ÏûëÏóÖ ÏÑ§Î™Ö
                </label>
                <textarea
                  id="taskContent"
                  className="form-input form-textarea"
                  placeholder="ÏûëÏóÖÏóê ÎåÄÌïú ÏûêÏÑ∏Ìïú ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                  maxLength="500"
                  value={formData.description}
                  onChange={(e) =>
                    handleInputChange("description", e.target.value)
                  }
                  disabled={isSubmitting}
                />
              </div>

              {/* Ïö∞ÏÑ†ÏàúÏúÑ */}
              <div className="form-group">
                <label className="form-label">Ïö∞ÏÑ†ÏàúÏúÑ</label>
                <div className="priority-options">
                  {[
                    { value: "high", label: "üî¥ ÎÜíÏùå" },
                    { value: "medium", label: "üü° Î≥¥ÌÜµ" },
                    { value: "low", label: "üü¢ ÎÇÆÏùå" },
                  ].map((priority) => (
                    <div
                      key={priority.value}
                      className={`priority-option ${priority.value} ${
                        formData.priority === priority.value ? "selected" : ""
                      }`}
                      onClick={() =>
                        handleInputChange("priority", priority.value)
                      }
                    >
                      {priority.label}
                    </div>
                  ))}
                </div>
              </div>

              {/* ÏÉÅÌÉú Î∞è Îã¥ÎãπÏûê */}
              <div className="form-row">
                <div className="form-group">
                  <label className="form-label" htmlFor="taskStatus">
                    ÏÉÅÌÉú
                  </label>
                  <select
                    id="taskStatus"
                    className="form-select"
                    value={formData.status}
                    onChange={(e) =>
                      handleInputChange("status", e.target.value)
                    }
                    disabled={isSubmitting}
                  >
                    <option value="todo">üìù To Do</option>
                    <option value="progress">‚ö° In Progress</option>
                    <option value="review">üëÄ Review</option>
                    <option value="done">‚úÖ Done</option>
                  </select>
                </div>

                <div className="form-group">
                  <label className="form-label" htmlFor="taskAssignee">
                    Îã¥ÎãπÏûê
                  </label>
                  <input
                    type="text"
                    id="taskAssignee"
                    className="form-input"
                    placeholder="Îã¥ÎãπÏûê Ïù¥Î¶Ñ"
                    maxLength="20"
                    value={formData.assignee}
                    onChange={(e) =>
                      handleInputChange("assignee", e.target.value)
                    }
                    disabled={isSubmitting}
                  />
                </div>
              </div>

              {/* ÎßàÍ∞êÏùº */}
              <div className="form-group">
                <label className="form-label" htmlFor="taskDueDate">
                  ÎßàÍ∞êÏùº
                </label>
                <input
                  type="date"
                  id="taskDueDate"
                  className="form-input"
                  value={formData.dueDate}
                  onChange={(e) => handleInputChange("dueDate", e.target.value)}
                  disabled={isSubmitting}
                />
              </div>
            </>
          )}
        </div>

        <div className={`modal-actions ${isDeleteMode ? "delete-mode" : ""}`}>
          <button
            className="modal-btn modal-btn-cancel"
            onClick={onClose}
            disabled={isSubmitting}
          >
            Ï∑®ÏÜå
          </button>

          {isDeleteMode ? (
            <button
              className="modal-btn modal-btn-delete"
              onClick={handleDelete}
              disabled={isSubmitting}
            >
              {isSubmitting ? "ÏÇ≠Ï†ú Ï§ë..." : "ÏÇ≠Ï†úÌïòÍ∏∞"}
            </button>
          ) : (
            <button
              className="modal-btn modal-btn-save"
              onClick={handleSubmit}
              disabled={!isSaveEnabled}
            >
              {isSubmitting ? "Ï†ÄÏû• Ï§ë..." : "Ï†ÄÏû•"}
            </button>
          )}
        </div>
      </div>
    </div>
  );
};
